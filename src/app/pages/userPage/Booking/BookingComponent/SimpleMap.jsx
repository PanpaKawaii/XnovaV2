import { useEffect, useRef } from "react";
import L from "leaflet";
import "leaflet/dist/leaflet.css";

export default function SimpleMap({ venues = [] }) {
    // export default function VenueMap() {
    const mapRef = useRef(null);
    const mapContainerRef = useRef(null);

    console.log('venues', venues);


    useEffect(() => {
        // NgƒÉn kh√¥ng kh·ªüi t·∫°o l·∫°i map nhi·ªÅu l·∫ßn
        if (mapRef.current) return;

        // T·∫°o b·∫£n ƒë·ªì m·∫∑c ƒë·ªãnh (t·∫°m ƒë·∫∑t ·ªü gi·ªØa Vi·ªát Nam)
        const map = L.map(mapContainerRef.current).setView([16.047079, 108.20623], 6);
        mapRef.current = map;

        // Th√™m tile layer t·ª´ OpenStreetMap
        L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
            attribution: "¬© OpenStreetMap contributors",
        }).addTo(map);

        // Bi·ªÉu t∆∞·ª£ng marker cho v·ªã tr√≠ ng∆∞·ªùi d√πng (m√†u xanh)
        const userIcon = L.icon({
            iconUrl: "https://cdn-icons-png.flaticon.com/512/64/64113.png",
            iconSize: [32, 32],
            iconAnchor: [16, 32],
            popupAnchor: [0, -32],
        });

        // Bi·ªÉu t∆∞·ª£ng marker cho c√°c venues (m√†u ƒë·ªè)
        const venueIcon = L.icon({
            iconUrl: "https://cdn-icons-png.flaticon.com/512/684/684908.png",
            iconSize: [32, 32],
            iconAnchor: [16, 32],
            popupAnchor: [0, -32],
        });

        // üß≠ L·∫•y v·ªã tr√≠ hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    const userLat = position.coords.latitude;
                    const userLng = position.coords.longitude;

                    // Marker v·ªã tr√≠ c·ªßa ng∆∞·ªùi d√πng
                    const userMarker = L.marker([userLat, userLng], { icon: userIcon })
                        .addTo(map)
                        .bindPopup("<b>V·ªã tr√≠ c·ªßa b·∫°n</b>")
                        .openPopup();

                    // Di chuy·ªÉn map ƒë·∫øn v·ªã tr√≠ c·ªßa ng∆∞·ªùi d√πng
                    map.setView([userLat, userLng], 13);
                },
                (err) => {
                    console.error("L·ªói khi l·∫•y v·ªã tr√≠ ng∆∞·ªùi d√πng:", err);
                }
            );
        }

        // üè† Hi·ªÉn th·ªã danh s√°ch venues
        venues.forEach((venue) => {
            if (venue.latitude && venue.longitude) {
                const marker = L.marker([parseFloat(venue.latitude), parseFloat(venue.longitude)], { icon: venueIcon })
                    .addTo(map)
                    .bindPopup(`<b>${venue.name}</b>`);
            }
        });

        // Cleanup
        return () => {
            map.remove();
            mapRef.current = null;
        };
    }, [venues]);

    return <div ref={mapContainerRef} style={{ height: "300px", width: "100%" }} />;
}
